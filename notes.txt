Random Notes
------------------
It's a classification problem. 
Data should show all data for each team and their opponent and should output a category of 1 or 2  or 3 for the primary team 1 for win 2 for loss 3 for a tie. 
The model can then be flipped for the other team and tested.

rule of thumb is need 10x number of training data as parameters.

parameters:
- temperature on game day
- Parcipitation on game day [0,0,1] rain, snow, clear
- team1 games won against team 2 in the last 2 years
- team1 games won this year
- team2 games won this year
- team1 goals scored this year
- team2 goals scored this year
- team1 goals allowed this year
- team2 goals allowed this year
- team1 goals scored this season against team2 (-1 if not played this year)
- team2 goals scored this season against team1 (-1 if not played this year)

need 120 datapoints to train data on

https://www.openligadb.de/api/getmatchdata/bl1/2015 to get full year of games.
https://docs.python.org/3/library/xml.etree.elementtree.html
https://docs.python.org/3/library/sqlite3.html

Need to re-create wins and losses ties per team at the time of each game for that year.

1) Would be good to get Amount of money each team payed for it's players
    - Also good to know amount for each player (if for example Ian Robin cost significantly more he should have a higher impact on the game)
2) Would be nice to get historical weather info for each game (temperature, percipitation wind level.)
3) Get historical matchups for teams last year and this year
4) Would be good to get lists of players that are injured
5) need to keep a list of predictions and compare to actual outcomes of games by version of algoryhim/training
6) don't include any info you wont have for next games.


not sure if I need machine learning for this or if a simpler algorithm would suffice
not sure if it would make sense to store everything in a Database. yes I think I should use a databse


Teams table {
  id: int;
  name: string;
}

game table {
  season: Int;
  date: datetime
  team1: id(team, this should always be the home team);
  team2: id(team);
  wind: int (wind speed in kph)
  temp: int (temp in C)
  percip: String (none, rain, snow)
  team1Goals: int(goals for team 1);
  team2Goals: int(goals for team 2);
}

Build
--------
Opening virtualenv "source ~/tensorflow/venv/bin/activate"

[0] id INTEGER PRIMARY KEY AUTOINCREMENT, 
[1] season YEAR, 
[2] date DATETIME, 
[3] team1 TINYINT, 
[4] team2 TINYINT, 
[5] wind TINYINT, 
[6] percip TINYTEXT, 
[7] temp TINYINT, 
[8] team1Result TINYINT, 
[9] team2Result TINYINT, 
[10] team1Goals TINYINT, 
[11] team2Goals TINYINT,
[12] team1GoalsScoredThisSeason TINYINT,
[13] team2GoalsScoredThisSeason TINYINT,
[14] team1GoalsAllowedThisSeason TINYINT,
[15] team2GoalsAllowedThisSeason TINYINT,
[16] team1GoalsScoredThisSeasonOpponent TINYINT,
[17] team2GoalsScoredThisSeasonOpponent TINYINT,
[18] team1GoalsAllowedThisSeasonOpponent TINYINT,
[19] team2GoalsAllowedThisSeasonOpponent TINYINT,
[20] team1LifetimeGoalsScoredOpponent TINYINT,
[21] team2LifetimeGoalsScoredOpponent TINYINT,
[22] team1LifetimeGoalsAllowedOpponent TINYINT,
[23] team2LifetimeGoalsAllowedOpponent TINYINT,
[24] team1SeasonWins TINYINT,
[25] team2SeasonWins TINYINT,
[26] team1SeasonLoss TINYINT,
[27] team2SeasonLoss TINYINT,
[28] team1SeasonTie TINYINT,
[29] team2SeasonTie TINYINT,
[30] team1SeasonOppWins TINYINT,
[31] team2SeasonOppWins TINYINT,
[32] team1SeasonOppLoss TINYINT,
[33] team2SeasonOppLoss TINYINT,
[34] team1SeasonOppTie TINYINT,
[35] team2SeasonOppTie TINYINT,
[36] team1LifetimeOppWins TINYINT,
[37] team2LifetimeOppWins TINYINT,
[38] team1LifetimeOppLoss TINYINT,
[39] team2LifetimeOppLoss TINYINT,
[40] team1LifetimeOppTie TINYINT,
[41] team2LifetimeOppTie TINYINT)''')


12 - 21 are empty WHY!?!?!?!?! 
Because you're an idiot. 
You have to actually add the values to the database. 
Look at line 243 = 280